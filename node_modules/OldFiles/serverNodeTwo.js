var PORT = 33333;
var HOST = '127.0.0.1';

var dgram = require('dgram');
var server = dgram.createSocket('udp4');

console.log("I am here for UDP");


server.on('listening', function () {
    var address = server.address();
    console.log('UDP Server listening on ' + address.address + ":" + address.port);
});

var PORTNODETWO = 44444;
//var HOST = '127.0.0.1';
//var dgram = require('dgram');
var client = dgram.createSocket('udp4');
server.on('message', function (message, remote) {
    console.log(remote.address + ':' + remote.port +' - ' + message);

    console.log("User Data Node One-->"+ message);
    //message = "Wrong Data";
    var nodeOne = new Buffer(message);
    console.log("User Data Node One After Buffer-->"+ nodeOne);

    client.send(nodeOne, 0, nodeOne.length, PORTNODETWO, HOST, function(err, bytes) {
        if (err) throw err;
        console.log('UDP message sent to ' + HOST +':'+ PORTNODETWO);
        //client.close();
    });
    //socket.setBroadcast

});

server.bind(PORT, HOST)



var PORTFOUR = 60000;
var HOSTFOUR = '127.0.0.1';

var dgram = require('dgram');
var serverAck = dgram.createSocket('udp4');

console.log("I am here for UDP");


serverAck.on('listening', function () {
    var address = serverAck.address();
    console.log('UDP server acknowledgemen listening on ' + address.address + ":" + address.port);
});

var PORTNODEONE = 4000;
var HOSTONE = '127.0.0.1';
//var dgram = require('dgram');
var clientAck = dgram.createSocket('udp4');
serverAck.on('message', function (message, remote) {
    console.log(remote.address + ':' + remote.port +' - ' + message);

    console.log("Node Four-->"+ message);
    //message = "Wrong Data";
    var nodeOne = new Buffer(message);
    console.log("Node Four After Buffer-->"+ nodeOne);
    clientAck.send(nodeOne, 0, nodeOne.length, PORTNODEONE, HOSTONE, function(err, bytes) {
        if (err) throw err;
        console.log('UDP message sent to ' + HOSTONE +':'+ PORTNODEONE);
        //client.close();
    });
    //socket.setBroadcast

});

serverAck.bind(PORTFOUR, HOSTFOUR)