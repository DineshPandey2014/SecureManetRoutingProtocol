var express = require('express');
var path = require('path');
var bodyParser = require("body-parser");
var app = express();
var crypto = require("crypto");
var mongoose = require("mongoose");
var trim = require("trim");

var PORT = 33333;
var HOST = '127.0.0.1';
var dgram = require('dgram');
var client = dgram.createSocket('udp4');
var key = "p6L32vnOhCn+Re/n3F+4";
app.use(bodyParser());
app.use(express.static(path.join(__dirname, 'bootstrap')));
app.use(express.static(path.join(__dirname, 'image')));

app.set('view engine', 'ejs');
var statusMessage ="";

var server = app.listen(3000, function() {
    console.log("Listening on port 3000");
});


app.get('/', function (req, res){
    res.render('baseTemplate.ejs', {
        statusmessageNodeOne: statusMessage,
    });
});

app.get('/home', function (req, res){
    res.render('baseTemplate.ejs', {
        statusmessageNodeOne: statusMessage,
    });
});

var dgramFailureErro = require('dgram');
var serverError = dgram.createSocket('udp4');
var PORTNODEERROR = 4000;
serverError.bind(PORTNODEERROR, HOST);
serverError.on('listening', function () {
    var address = serverError.address();
    console.log('UDP Server listening on ' + address.address + ":" + address.port);
});

app.post('/form', function(req, res) {
   var userData = req.body.userdata;
    if(userData !== 'undefined') {
        var message = encrypt(key, String(userData).replace(/^\s+|\s+$/g, ''));
        console.log("User Data" + message);
        client.send(message, 0, message.length, PORT, HOST, function (err, bytes) {
            console.log('UDP message sent to ' + HOST + ':' + PORT);
        });
        insertToDB(HOST, PORT);

    }
});

serverError.on('message', function (errormessage, remote) {
    statusMessage = decrypt(key, errormessage);
    console.log(remote.address + ':' + remote.port + ' - ' + statusMessage);
});

mongoose.connect("mongodb://127.0.0.1:27017/manetProtocol");

var Schema = new mongoose.Schema({
    IpAddress: String,
    Port: String,
    Status: String,
    DateTime: Date
})

var manetdashboard = mongoose.model("manet", Schema);



app.get('*', function(req, res) {
       res.send('Bad Routes');
    }
);


function encrypt(key, data) {
    var cipher = crypto.createCipher('aes-256-cbc', key);
    var cryptedBuffers = [cipher.update(new Buffer(data))];
    cryptedBuffers.push(cipher.final());
    var crypted = Buffer.concat(cryptedBuffers);
    return crypted;
}

function insertToDB(ipAddressNodeOne, portNodeOne) {
    console.log("Inserting The Records");
    new manetdashboard({
        IpAddress: ipAddressNodeOne,
        Port: portNodeOne,
        DateTime: new Date(),
        Status: "Failure",
    }).save();
}


function decrypt(key, data) {
    var decipher = crypto.createDecipher('aes-256-cbc', key);
    decipher.setAutoPadding(auto_padding=false);
    var dcryptedBuffers = [decipher.update(new Buffer(data))];
    try {
        dcryptedBuffers.push(decipher.final());
    } catch(err){
        console.log("---Hello User, there is error.");

    }
    var dcrypted = Buffer.concat(dcryptedBuffers)
        .toString('utf8');
    return dcrypted;
}


