/*
 * Package used.
 *
 * express: It's a UI frame work for node.js
 * path: To load the package
 * body-parser: Body parsing for middleware.
 * crypto: CryptoJS is a growing collection of standard and secure cryptographic algorithms implemented in JavaScript.
 * trim: Node package for triming whitespace.
 * mongoose: Mongoose is an object data modeling (ODM) library for Node.js
 * dgram: Datagram sockets are available through require('dgram'). Datagrams are most commonly handled as IP/UDP
 *        messages but they can also be used over Unix domain sockets
 *
 * Node Three.
 */

var express = require('express');
var path = require('path');
var bodyParser = require("body-parser");
var dgram = require('dgram');
var app = express();
var crypto = require("crypto");
var mongoose = require("mongoose");
var decryptedText="";
var status = ""

app.use(bodyParser());
app.use(express.static(path.join(__dirname, 'bootstrap')));
app.use(express.static(path.join(__dirname, 'image')));
app.set('view engine', 'ejs');

/*
 * App of node three listen on the port 3000. Get the data from the browser.
 */
var server = app.listen(2000, function() {
    console.log("Listening on port 2000");
});

/*
 *  Node Three Will Run.
 * Default url for the page rendering.
 * e.g: http://localhost:2000/
 */
app.get('/', function (req, res){
    res.render('nodeThree.ejs', {
        decryptedText: decryptedText,
        statusMessageNodeThree: status,
    });
});

/*
 * Node Three Will Run.
 * Click on the menu home link will render the page.
 * http://localhost:3000/home
 */
app.get('/home', function (req, res){
    res.render('nodeThree.ejs', {
        decryptedText: decryptedText,
        statusMessageNodeThree: status,
    });
});

/*
 *
 * Node three will open the port at 4444.
 * Receive the encrypted message from node one via two.
 */
var PORT_NODE_THREE = 44444;

/*
 * IP of node three.
 */
var HOST_NODE_THREE = '127.0.0.1';
var server_node_three = dgram.createSocket('udp4');
server_node_three.bind(PORT_NODE_THREE, HOST_NODE_THREE);
server_node_three.on('listening', function () {
    var address = server.address();
    console.log('UDP Server listening on ' + address.address + ":" + address.port);
});

/*
 * Call decrypt the data which will come either from node two or from node four.
 */
server_node_three.on('message', function (message, remote) {
    var key = "p6L32vnOhCn+Re/n3F+4";
    decrypt(key, message);
    console.log("--Decrypted Text--"+decryptedText);
    console.log(remote.address + ':' + remote.port +' - ' + decryptedText);
});

/*
 * Decrypt the message using the key and the sends the message of success or error.
 *
 * Error Message: If the message got hacked or changed in between it will through an error and sends the error message
 * to node one.
 *
 * Success Message: If the message got successfully decrypted.
 *
 */
function decrypt(key, data) {
    var decipher = crypto.createDecipher('aes-256-cbc', key);
    decipher.setAutoPadding(auto_padding=false);
    var dcryptedBuffers = [decipher.update(new Buffer(data))];
    try {
        dcryptedBuffers.push(decipher.final());
    } catch(err){
        status = "Error Data Not Received Correctly From Node One Via Node Four.";
        decryptedText = "";
        acknowledgementMessage(status);
        return;
    }
    var dcrypted = Buffer.concat(dcryptedBuffers)
        .toString('utf8');
    decryptedText = dcrypted.replace(/[^A-Za-z 0-9 \.,\?""!@#\$%\^&\*\(\)-_=\+;:<>\/\\\|\}\{\[\]`~]*/g, '') ;
    console.log("-----dcrypted------>"+dcrypted);
    status = "Data Received Successfully From Node One Via Node Two at time:" + new Date();
    acknowledgementMessage(status);
}

/*
 * Encrypt the message which is send to node one.
 * Encryption algo 'aes-256-cbc'
 *
 */
function encrypt(key, data) {
    var cipher = crypto.createCipher('aes-256-cbc', key);
    var cryptedBuffers = [cipher.update(new Buffer(data))];
    cryptedBuffers.push(cipher.final());
    var crypted = Buffer.concat(cryptedBuffers);
    return crypted;
}

/*
 * Node three will sends the acknowledgment to node one via node two.
 *
 */
function acknowledgementMessage(status) {
    /*
     * IP of node two.
     */
    var HOST_NODE_TWO = '127.0.0.1';
    /*
     * Port of node three.
     */
    var PORT_NODE_TWO= 60000;
    /*
     * Key for encryption the acknowledgment for success or error message.
     */
    var key = "p6L32vnOhCn+Re/n3F+4";
    var statusMessage = encrypt(key, status);
    var client = dgram.createSocket('udp4');
    var nodeThreestatusMessage = new Buffer(statusMessage);
    console.log("Send the message from node three to node two."+ nodeThreestatusMessage);
    client.send(nodeThreestatusMessage, 0, nodeThreestatusMessage.length, PORT_NODE_TWO, HOST_NODE_TWO,
        function(err, bytes) {
            if (err) throw err;
            console.log('UDP message sent to ' + HOST_NODE_TWO +':'+ PORT_NODE_TWO);
        });

}
