var express = require('express');
var path = require('path');
var bodyParser = require("body-parser");
var app = express();
var crypto = require("crypto");
var mongoose = require("mongoose");
var decryptedText="";
var status = ""
app.use(bodyParser());
app.use(express.static(path.join(__dirname, 'bootstrap')));
app.use(express.static(path.join(__dirname, 'image')));

app.set('view engine', 'ejs');

var server = app.listen(2000, function() {
    console.log("Listening on port 2000");
});


app.get('/', function (req, res){
    res.render('serverThreeTemplate.ejs', {
        decryptedText: decryptedText,
        statusMessageNodeThree: status,
    });
});

app.get('/home', function (req, res){
    res.render('serverThreeTemplate.ejs', {
        decryptedText: decryptedText,
        statusMessageNodeThree: status,
    });
});


var PORT_NODE_THREE = 44444;
var HOST_NODE_THREE = '127.0.0.1';
var crypto = require("crypto")
var dgram = require('dgram');
var server = dgram.createSocket('udp4');
var crypto = require("crypto")
server.bind(PORT_NODE_THREE, HOST_NODE_THREE);

server.on('listening', function () {
    var address = server.address();
    console.log('UDP Server listening on ' + address.address + ":" + address.port);
});

server.on('message', function (message, remote) {
    var key = "p6L32vnOhCn+Re/n3F+4";
    decrypt(key, message);
    console.log("Dinesh-vvvv--"+decryptedText);
    console.log(remote.address + ':' + remote.port +' - ' + decryptedText);

});


function decrypt(key, data) {
    var decipher = crypto.createDecipher('aes-256-cbc', key);
    decipher.setAutoPadding(auto_padding=false);
    var dcryptedBuffers = [decipher.update(new Buffer(data))];
    try {
        dcryptedBuffers.push(decipher.final());
    } catch(err){
        status = "Error Data Not Received Correctly From Node One Via Node Four.";
        decryptedText = "";
        acknowledgementMessage(status);
        return;
    }
    var dcrypted = Buffer.concat(dcryptedBuffers)
        .toString('utf8');
    decryptedText = dcrypted;
    console.log("-----dcrypted------>"+dcrypted);
    status = "Data Received Successfully From Node One Via Node Two at time:" + new Date();
    acknowledgementMessage(status);
}

function encrypt(key, data) {
    var cipher = crypto.createCipher('aes-256-cbc', key);
    var cryptedBuffers = [cipher.update(new Buffer(data))];
    cryptedBuffers.push(cipher.final());
    var crypted = Buffer.concat(cryptedBuffers);
    return crypted;
}

function acknowledgementMessage(status) {
    var PORT_NODE_FOUR = 60000;
    var HOST_NODE_FOUR = '127.0.0.1';
    var key = "p6L32vnOhCn+Re/n3F+4";
    var statusMessage = encrypt(key, status);
    var client = dgram.createSocket('udp4');
    var nodeThreestatusMessage = new Buffer(statusMessage);
    console.log("Node three After Buffer-->"+ nodeThreestatusMessage);
    client.send(nodeThreestatusMessage, 0, nodeThreestatusMessage.length, PORT_NODE_FOUR, HOST_NODE_FOUR,
        function(err, bytes) {
            if (err) throw err;
            console.log('UDP message sent to ' + HOST_NODE_FOUR +':'+ PORT_NODE_FOUR);
            //client.close();
        });

}

function acknowledgementMessage(status) {
    var PORT_NODE_FOUR = 60000;
    var HOST_NODE_FOUR = '127.0.0.1';
    var key = "p6L32vnOhCn+Re/n3F+4";
    var statusMessage = encrypt(key, status);
    var client = dgram.createSocket('udp4');
    var nodeThreestatusMessage = new Buffer(statusMessage);
    console.log("Node three After Buffer-->"+ nodeThreestatusMessage);
    client.send(nodeThreestatusMessage, 0, nodeThreestatusMessage.length, PORT_NODE_FOUR, HOST_NODE_FOUR,
        function(err, bytes) {
            if (err) throw err;
            console.log('UDP message sent to ' + HOST_NODE_FOUR +':'+ PORT_NODE_FOUR);
            //client.close();
        });

}