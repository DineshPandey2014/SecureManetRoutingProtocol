/*
 * Package used.
 *
 * express: It's a UI frame work for node.js
 * path: To load the package
 * body-parser: Body parsing for middleware.
 * crypto: CryptoJS is a growing collection of standard and secure cryptographic algorithms implemented in JavaScript.
 * trim: Node package for triming whitespace.
 * mongoose: Mongoose is an object data modeling (ODM) library for Node.js
 * dgram: Datagram sockets are available through require('dgram'). Datagrams are most commonly handled as IP/UDP
 *        messages but they can also be used over Unix domain sockets
 *
 * Node One
 */

var express = require('express');
var path = require('path');
var bodyParser = require("body-parser");
var app = express();
var crypto = require("crypto");
var mongoose = require("mongoose");
var trim = require("trim");
var dgram = require('dgram');
var client = dgram.createSocket('udp4');
var trimSpaceRegx = '/[^A-Za-z 0-9 \.,\?""!@#\$%\^&\*\(\)-_=\+;:<>\/\\\|\}\{\[\]`~]*/g';

app.use(bodyParser());
app.use(express.static(path.join(__dirname, 'bootstrap')));
app.use(express.static(path.join(__dirname, 'image')));
app.set('view engine', 'ejs');

/*
 * Private key for encrypting the data.
 *
 */
var key = "p6L32vnOhCn+Re/n3F+4";
/*
 *
 */
//var PORT = 33333;
/*
 *
 * IP of node one. Currently it is local host. Change accordingly for the network devices.
 */
var HOST_NODE_ONE= '127.0.0.1';
var statusMessage ="";

/*
 * Connect to mongo db. default port and schema name.
 */
mongoose.connect("mongodb://127.0.0.1:27017/manetProtocol");
/*
 * App of nodeOne listen on the port 3000. Get the data from the browser.
 */
var server = app.listen(3000, function() {
    console.log("Listening on port 3000");
});

/*
 * Default url for the page rendering.
 * e.g: http://localhost:3000/
 */
app.get('/', function (req, res){
    res.render('nodeOne.ejs', {
        statusmessageNodeOne: statusMessage,
    });
});

/*
 * Click on the menu home link will render the page.
 * http://localhost:3000/home
 */
app.get('/home', function (req, res){
    res.render('nodeOne.ejs', {
        statusmessageNodeOne: statusMessage,
    });
});

app.post('/form', function(req, res) {
   var userData = req.body.userdata;
    var selectNode = req.body.selectNode;
    console.log("---Selected Node---"+selectNode);
    /*
     * Sends the data through node two, If in the form selecred Node Two from the drop down.
     */
    if(userData !== 'undefined' && selectNode == 'NodeTwo') {
        console.log("Inside the node two");
        /*
         * Ip of node two.
         */
        var HOST_NODE_TWO = '127.0.0.1';
        /*
         * Port of node two.
         */
        var  PORT_OF_NODE_TWO = 33333;
        var message = encrypt(key, String(userData).replace(/^\s+|\s+$/g, ''));
        console.log("User Data" + message);
        client.send(message, 0, message.length, PORT_OF_NODE_TWO, HOST_NODE_TWO, function (err, bytes) {
            console.log('UDP message sent to node two ' + HOST_NODE_TWO + ':' + PORT_OF_NODE_TWO);
        });
        insertToDB(HOST_NODE_TWO, PORT_OF_NODE_TWO);
    }

    if (userData !== 'undefined' && selectNode == 'NodeFour') {
        /*
         * Sends the data through node four.
         */
        var PORT_FOUR_OF_NODE_FOUR = 55555;
        var HOST_NODE_FOUR= '127.0.0.1';
        var dgram = require('dgram');
        var clientFour = dgram.createSocket('udp4');
        console.log("Inside the node four");
        var message = encrypt(key, String(userData).replace(/^\s+|\s+$/g, ''));
        console.log("User Data" + message);
        clientFour.send(message, 0, message.length, PORT_FOUR_OF_NODE_FOUR, HOST_NODE_FOUR, function (err, bytes) {
            console.log('UDP message sent to node four ' + HOST_NODE_FOUR + ':' + PORT_FOUR_OF_NODE_FOUR);
        });
        insertToDB(HOST_NODE_FOUR, PORT_FOUR_OF_NODE_FOUR);
    }
});

/*
 * For wrong url it will display the message as
 */
app.get('*', function(req, res) {
        res.send('Bad Url, Please correct it to http://localhost:3000/');
    }
);

/*
 * Node one will receive the message from Node two
 * Node one is opening the socket and listening to the port 4000.
 * Creating the socket in node one using udp4.
 *
 */
var dgramAckMessage = require('dgram');
var server_ack_node_one = dgramAckMessage.createSocket('udp4');
var PORTNODEERROR = 4000;
server_ack_node_one.bind(PORTNODEERROR, HOST_NODE_ONE);
server_ack_node_one.on('listening', function () {
    var address = server_ack_node_one.address();
    console.log('UDP Server listening on ' + address.address + ":" + address.port);
});

/*
 * Get's the acknowledgment from nodeTwo and nodeFour.
 */
server_ack_node_one.on('message', function (errormessage, remote) {
    statusMessage = decrypt(key, errormessage);
    console.log(remote.address + ':' + remote.port + ' - ' + statusMessage);
});

/*
 * Mongo db schema.
 */
var Schema = new mongoose.Schema({
    IpAddress: String,
    Port: String,
    Status: String,
    DateTime: Date
})

var manetdashboard = mongoose.model("manet", Schema);

/*
 * Encrypt the data which is send between the nodes.
 * Encryption algo 'aes-256-cbc'
 *
 */
function encrypt(key, data) {
    var cipher = crypto.createCipher('aes-256-cbc', key);
    var cryptedBuffers = [cipher.update(new Buffer(data))];
    cryptedBuffers.push(cipher.final());
    var crypted = Buffer.concat(cryptedBuffers);
    return crypted;
}

/*
 * Insert node ip  and port into the DB mongo db.
 * It will insert the ipaddress and port of the node to whom it
 * sends the data.
 */
function insertToDB(ipAddressNodeTwo, portNodeTwo) {
    console.log("Inserting The Records");
    new manetdashboard({
        IpAddress: ipAddressNodeTwo,
        Port: portNodeTwo,
        DateTime: new Date(),
        Status: "Failure",
    }).save();
}

/*
 * Function for decrypting the data.
 * Decrypt the status message.
 */
function decrypt(key, data) {
    var decipher = crypto.createDecipher('aes-256-cbc', key);
    decipher.setAutoPadding(auto_padding=false);
    var dcryptedBuffers = [decipher.update(new Buffer(data))];
    try {
        dcryptedBuffers.push(decipher.final());
    } catch(err){
        console.log("Error in the decryption.");
    }
    var dcrypted = Buffer.concat(dcryptedBuffers)
        .toString('utf8');
    return dcrypted.replace(trimSpaceRegx, '') ;
}


